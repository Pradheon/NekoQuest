score = 0
live = 3

if score == 20:
    #
def load_image(name, colorkey=None):
    fullname = os.path.join(data_dir, name)
    try:
        image = pg.image.load(fullname)
    except pg.error:
        print("Cannot load image:", fullname)
        raise SystemExit(str(geterror()))
    image = image.convert()
    if colorkey is not None:
        if colorkey == -1:
            colorkey = image.get_at((0, 0))
        image.set_colorkey(colorkey, pg.RLEACCEL)
    return image, image.get_rect()



while 1
    for event in pygame.event.get():
        if event.key == K_RIGHT:
            char.move('right')
        elif event.key == K_LEFT:
            char.move('left')
        elif event.key == K_UP:
            char.move('up')
        elif event.key == K_DOWN:
            char.move('down')



spriteS = Spritesheet('trainer_sheet.png')
Running = [spriteS.parse_sprite('Running-0'), spriteS.parse_sprite('Running-1'), spriteS.parse_sprite('Running-2'), spriteS.parse_sprite('Running-3'), spriteS.parse_sprite('Running-4'), spriteS.parse_sprite('Running-5')]
StandR =[spriteS.parse_sprite('StandRing-0'), spriteS.parse_sprite('StandRing-1'), spriteS.parse_sprite('StandRing-2'), spriteS.parse_sprite('StandRing-3')]
index = 0

class Spritesheet:
    def __init__(self, filename):
        self.filename = filename
        self.sprite_sheet = pygame.image.load(filename).convert()
        self.meta_data = self.filename.replace('png', 'json')
        with open(self.meta_data) as f:
            self.data = json.load(f)
        f.close()

    def get_sprite(self, x, y, w, h):
        sprite = pygame.Surface((w, h))
        sprite.set_colorkey((0,0,0))
        sprite.blit(self.sprite_sheet,(0, 0),(x, y, w, h))
        return sprite

    def parse_sprite(self, name):
        sprite = self.data['frames'][name]['frame']
        x, y, w, h = sprite["x"], sprite["y"], sprite["w"], sprite["h"]
        image = self.get_sprite(x, y, w, h)
        return image
#################################################################################################
import pygame
pygame.init()

self.window = pygame.display.set_mode((1280, 720))

pygame.display.set_caption("Test Sprites")

walkRight = [pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunR-0.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunR-1.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunR-2.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunR-3.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunR-4.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunR-5.png')]
walkLeft = [pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunL-0.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunL-1.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunL-2.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunL-3.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunL-4.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunL-5.png')]
jumpUp = [pygame.image.load(r'C:\Nekopara Minigame\images\sprites\Jump-0.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\Jump-1.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\Jump-2.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\Jump-3.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\Jump-4.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\Jump-5.png')]
bg = pygame.image.load(r'C:\Nekopara Minigame\images\bgLvl.png')
charR = [pygame.image.load(r'C:\Nekopara Minigame\images\sprites\StandR-0.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\StandR-1.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\StandR-2.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\StandR-3.png')]
charL = [pygame.image.load(r'C:\Nekopara Minigame\images\sprites\StandL-0.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\StandL-1.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\StandL-2.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\StandL-3.png')]

cl = pygame.time.Clock()

class player(object):
    def __init__(self, x, y, w, h):
        self.x = x
        self.y = y
        self.w = w
        self.h = h
        self.vel = 5
        self.isJump = False
        self.left = False
        self.right = False
        self.idleR = False
        self.idleL = False
        self.walkCount = 0
        self.jumpCount = 10

    def draw(self, self.window):
        if self.walkCount + 1 >= 18:
            self.walkCount = 0

        if self.left:
            self.window.blit(walkLeft[self.walkCount//3], (self.x, self.y))
            self.walkCount += 1
        elif self.right:
            self.window.blit(walkRight[self.walkCount//3], (self.x, self.y))
            self.walkCount += 1
        elif self.idleR:
            self.window.blit(charR[self.walkCount//3], (self.x, self.y))
            self.walkCount += 1
        elif self.idleL:
            self.window.blit(charL[self.walkCount//3], (self.x, self.y))
            self.walkCount += 1

def redrawGameWindow():
    self.window.blit(bg, (0, 0))
    ko.draw(self.window)

    pygame.display.update()

ko = player(200, 410, 80, 80)
run = True
while run:
    cl.tick(18)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

    keys = pygame.key.get_pressed()

    if keys[pygame.K_LEFT] and ko.x > ko.vel:
        ko.x -= ko.vel
        ko.left = True
        ko.right = False
        ko.idle = False
    elif keys[pygame.K_RIGHT] and ko.x < 1280 - ko.w - ko.vel:
        ko.x += ko.vel
        ko.right = True
        ko.left = False
        ko.idle = False
    else:
        ko.right = False
        ko.left = False
        ko.idleR = True
        ko.walkCount = 0

    if not(ko.isJump):
        if keys[pygame.K_SPACE]:
            ko.isJump = True
            ko.right = False
            ko.left = False
            ko.idle = False
            ko.walkCount = 0
    else:
        if ko.jumpCount >= -10:
            neg = 1
            if ko.jumpCount < 0:
                neg = -1
            ko.y -= (ko.jumpCount ** 2) * 0.5 * neg
            ko.jumpCount -= 1
        else:
            ko.isJump = False
            ko.jumpCount = 10

    redrawGameWindow()

pygame.quit()
##########################################################################
# !/usr/bin/python3.9
#
# Nekopara Minigame
# Based off of the Nekopara series developed by NEKOWORKs, published by Sekai Project
# Neko Quest developed by Joshan Rai
# Uses arrow keys to move
#
# Released under the Creative Commons License

# Load Modules
import sys
import os
import random
import math
import getopt
import pygame
import json
from pygame.locals import *
from pygame.sprite import Sprite
from socket import *

#Initializer
pygame.init()

# Version, Clock, Images, Screen
VERSION = "0.1"

win = pygame.display.set_mode((1280, 720))
pygame.display.set_caption("Neko Quest")

walkRight = [pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunR-0.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunR-1.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunR-2.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunR-3.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunR-4.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunR-5.png')]
walkLeft = [pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunL-0.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunL-1.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunL-2.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunL-3.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunL-4.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\RunL-5.png')]
jumpUp = [pygame.image.load(r'C:\Nekopara Minigame\images\sprites\Jump-0.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\Jump-1.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\Jump-2.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\Jump-3.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\Jump-4.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\Jump-5.png')]
bg = pygame.image.load(r'C:\Nekopara Minigame\images\bgLvl.png')
charR = [pygame.image.load(r'C:\Nekopara Minigame\images\sprites\StandR-0.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\StandR-1.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\StandR-2.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\StandR-3.png')]
charL = [pygame.image.load(r'C:\Nekopara Minigame\images\sprites\StandL-0.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\StandL-1.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\StandL-2.png'), pygame.image.load(r'C:\Nekopara Minigame\images\sprites\StandL-3.png')]

cl = pygame.time.Clock()

class player(object):
    def __init__(self, x, y, w, h):
        self.x = x
        self.y = y
        self.w = w
        self.h = h
        self.vel = 5
        self.isJump = False
        self.left = False
        self.right = False
        self.walkCount = 0
        self.jumpCount = 10

    def draw(self, win):
        if self.walkCount + 1 >= 18:
            self.walkCount = 0

        if self.left:
            win.blit(walkLeft[self.walkCount//3], (self.x, self.y))
            self.walkCount += 1
        elif self.right:
            win.blit(walkRight[self.walkCount//3], (self.x, self.y))
            self.walkCount += 1
        else:
            win.blit(charR[self.walkCount//3], (self.x, self.y))
            self.walkCount += 1

def redrawGameWindow():
    win.blit(bg, (0, 0))
    ko.draw(win)

    pygame.display.update()

ko = player(40, 500, 80, 80)
run = True
while run:
    cl.tick(18)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

    keys = pygame.key.get_pressed()

    if keys[pygame.K_LEFT] and ko.x > ko.vel:
        ko.x -= ko.vel
        ko.left = True
        ko.right = False
    elif keys[pygame.K_RIGHT] and ko.x < 1280 - ko.w - ko.vel:
        ko.x += ko.vel
        ko.right = True
        ko.left = False
    else:
        ko.right = False
        ko.left = False
        ko.walkCount = 0

    if not(ko.isJump):
        if keys[pygame.K_SPACE]:
            ko.isJump = True
            ko.right = False
            ko.left = False
            ko.walkCount = 0
    else:
        if ko.jumpCount >= -10:
            neg = 1
            if ko.jumpCount < 0:
                neg = -1
            ko.y -= (ko.jumpCount ** 2) * 0.5 * neg
            ko.jumpCount -= 1
        else:
            ko.isJump = False
            ko.jumpCount = 10

    redrawGameWindow()

pygame.quit()
